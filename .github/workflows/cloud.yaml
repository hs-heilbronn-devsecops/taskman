name: DevOps and SecOps Exercise

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened]

jobs:
  build:
    runs-on: ubuntu-latest  
    env:
      CI: true
      REGISTRY: ghcr.io
      REGION: europe-west3
      IMAGE_NAME: ${{ github.repository }}
      SERVICE: taskman-hhn-secops-projectgrp-vrock
   
    permissions:
      contents: 'read'
      packages: write
      id-token: 'write'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install development dependencies
        run: pip install -r requirements-dev.txt

      - name: Install pytest-xdist
        run: pip install pytest-xdist

      - name: Upgrade pytest
        run: pip install --upgrade pytest

       #Exercise 2 

       #2- Submit the results to a service measuring the code by CODE-CV
      - name: Generate Report
        run: |
         pip install codecov
         pip3 install httpx
         pip install pytest-cov
         pytest --cov=./ --cov-report=xml
         codecov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECV_TOKEN }}

    #3- Integrate a security scanner into the pipeline that analyses our code and dependencies by snyk.
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Snyk
        run: npm install -g snyk

      - name: Scan for security vulnerabilities
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --file=requirements.txt
        continue-on-error: true
    
    #4 - Build a container and pushing it to the github container registry.
        
      - name: Log in to the Container registry
        uses:  docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses:  docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            vrock1/hhn-secops-projectgrp-vrock
          flavor: latest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      #Exercise 3
      
      - name: Authentication to Cloud Run
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/70756149774/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com'

      - name: Deploy to Cloud Run
        id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with:
         service: 'taskman-hhn-secops-projectgrp-vrock'
         image: 'docker.io/vrock1/hhn-secops-projectgrp-vrock:latest'
         env_vars: BACKEND=memory
         region: ${{env.REGION}}

      - name: 'Output'
        run: 'curl "${{ steps.deploy.outputs.url }}"' 